# -*- coding: utf-8 -*-
"""content_based_filtering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14BbxDpRuo58e67W3yJCEQbl2neFzD0vh
"""

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from skimage import io
from sklearn.decomposition import PCA

import os
from google.colab import drive
drive.mount('/gdrive')

transactions = pd.read_csv('/gdrive/MyDrive/HM_articles_recommendation/transactions_train.csv')
articles = pd.read_csv('/gdrive/MyDrive/HM_articles_recommendation/articles.csv')
customers = pd.read_csv('/gdrive/MyDrive/HM_articles_recommendation/customers.csv')

users = next(transactions)

df = users.merge(articles, on='article_id')

df.shape

df = df[['t_dat', 'customer_id', 'article_id', 'prod_name', 'product_type_name', 'product_group_name','graphical_appearance_name', 'colour_group_name',
       'perceived_colour_value_name',
       'perceived_colour_master_name',
       'department_name', 'index_name',
       'index_group_name', 'section_name',
       'garment_group_name', 'detail_desc']]

features = ['product_group_name', 
       'graphical_appearance_name', 'colour_group_name',
       'perceived_colour_value_name',
       'perceived_colour_master_name',
       'department_name', 'index_name',
       'index_group_name', 'section_name',
       'garment_group_name']

df1 = df[['customer_id', 'article_id'] + features]
dummies_df = pd.get_dummies(df1, columns=features)
dummies_df.head()

minimum_items = 0
customer_groups = dummies_df.groupby('customer_id')

l = []
cutomer_ids = []
article_ids = []
for key in customer_groups.groups.keys():
    k = customer_groups.get_group(key)
    if k.article_id.nunique() >= minimum_items:
        l.append(k.drop('article_id', axis=1).sum(numeric_only=True).values)
        cutomer_ids.append(key)
        article_ids.extend(k.article_id.values.tolist())
    else:
      continue

user_feature = pd.DataFrame(l, columns = dummies_df.columns[2:])
normalized_user_feature = user_feature.div(user_feature.sum(axis=1), axis=0)
normalized_user_feature.insert(0, 'customer_id', cutomer_ids)
normalized_user_feature = normalized_user_feature.set_index('customer_id')
normalized_user_feature.head()

item_feature = dummies_df.drop_duplicates(subset='article_id')
item_feature = item_feature[item_feature.article_id.isin(article_ids)].drop('customer_id', axis=1)
item_feature = item_feature.set_index('article_id')
item_feature.head()

scores = normalized_user_feature.dot(item_feature.T)
scores.head()

pca = PCA(n_components=100)
pca.fit(normalized_user_feature)
pca.explained_variance_ratio_.sum()

user_feature_pca = pd.DataFrame(pca.transform(normalized_user_feature), 
                                columns=['component_{}'.format(i) for i in range(1, 101)]).set_index(normalized_user_feature.index)
item_feature_pca = pd.DataFrame(pca.transform(item_feature), 
                                columns=['component_{}'.format(i) for i in range(1, 101)]).set_index(item_feature.index)

scores_pca = user_feature_pca.dot(item_feature_pca.T)

def get_recommend(customer_id, scores):
    cutomer_scores = scores.loc[customer_id]
    customer_prev_items = customer_groups.get_group(customer_id)['article_id']
    prev_dropped = cutomer_scores.drop(customer_prev_items.values)
    ordered = prev_dropped.sort_values(ascending=False)   
    return ordered, customer_prev_items

k = 12
customer_id = scores.index

#rcmnds, prev_items = get_recommend(customer_id, scores)
#rcmnds_pca, prev_items = get_recommend(customer_id, scores_pca)
#rcmnds = rcmnds.index.values[:k]
#rcmnds_pca = rcmnds_pca.index.values[:k]

res = pd.DataFrame(columns=['customer_id', 'prediction'])
res_pca = pd.DataFrame(columns=['customer_id', 'prediction'])
res_li = []
res_li_pca = []
for idx in customer_id:
  rcmnds, prev_items = get_recommend(idx, scores)
  rcmnds_pca, prev_items = get_recommend(idx, scores_pca)
  rcmnds = rcmnds.index.values[:k]
  rcmnds_pca = rcmnds_pca.index.values[:k]
  res_li.append(rcmnds)
  res_li_pca.append(rcmnds_pca)

"""This is the output"""

res['customer_id'] = customer_id
res['prediction'] = res_li
res_pca['customer_id'] = customer_id
res_pca['prediction'] = res_li_pca

from google.colab import files

res.to_csv('submission.csv', encoding = 'utf-8-sig')
files.download('submission.csv')